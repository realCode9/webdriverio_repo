import type { EdgedriverParameters } from 'edgedriver';
import type { Options, Capabilities } from '@wdio/types';
export declare function parseParams(params: EdgedriverParameters): string[];
export declare function getBuildIdByChromePath(chromePath?: string): string | undefined;
export declare function getBuildIdByFirefoxPath(firefoxPath?: string): Promise<string | undefined>;
export declare const downloadProgressCallback: (artifact: string, downloadedBytes: number, totalBytes: number) => void;
export declare function setupPuppeteerBrowser(cacheDir: string, caps: Capabilities.Capabilities): Promise<{
    executablePath: string;
    browserVersion: string | undefined;
} | {
    executablePath: string | undefined;
    browserVersion: string;
}>;
export declare function getDriverOptions(caps: Capabilities.Capabilities): WebdriverIO.ChromedriverOptions | WebdriverIO.GeckodriverOptions | WebdriverIO.EdgedriverOptions;
export declare function getCacheDir(options: Pick<Options.WebDriver, 'cacheDir'>, caps: Capabilities.Capabilities): string;
export declare function setupChromedriver(cacheDir: string, driverVersion?: string): Promise<{
    executablePath: string;
}>;
export declare function setupGeckodriver(cacheDir: string, driverVersion?: string): Promise<string>;
export declare function setupEdgedriver(cacheDir: string, driverVersion?: string): Promise<string>;
/**
 * helper method to determine if we need to setup a browser driver
 * which is:
 *   - whenever the user has set connection options that differ
 *     from the default, or a port is set
 *   - whenever the user defines `user` and `key` which later will
 *     update the connection options
 */
export declare function definesRemoteDriver(options: Pick<Options.WebDriver, 'user' | 'key' | 'protocol' | 'hostname' | 'port' | 'path'>): boolean;
export declare function isChrome(browserName?: string): boolean;
export declare function isSafari(browserName?: string): boolean;
export declare function isFirefox(browserName?: string): boolean;
export declare function isEdge(browserName?: string): boolean;
//# sourceMappingURL=utils.d.ts.map